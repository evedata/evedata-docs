[build-system]
requires = ["uv_build>=0.8.0,<0.9"]
build-backend = "uv_build"

[project]
name = "evedata-docs"
version = "0.1.0"
description = "EVEData documentation"
readme = "README.md"
authors = [{ name = "Corvin Vale", email = "corvin@valeant.space" }]
classifiers = ["Private :: Do Not Upload"]
requires-python = ">=3.13"
dependencies = [
    "mkdocs-git-authors-plugin>=0.10.0",
    "mkdocs-git-revision-date-localized-plugin>=1.4.7",
    "mkdocs-glightbox>=0.4.0",
    "mkdocs-material[imaging]>=9.6.15",
    "python-dotenv>=1.1.1",
]

[dependency-groups]
dev = [
  "codespell>=2.4.1",
  "pre-commit>=4.2.0",
  "pyright>=1.1.403",
  "ruff>=0.12.4",
]

[tool.codespell]
check-filenames = true
check-hidden = true

[tool.pyright]
strict = ["scripts"]
venvPath = "."
venv = ".venv"
exclude = ["**/.*", "**/__pycache__", "**/node_modules"]

[tool.ruff]
target-version = "py313"

[tool.ruff.lint]
select = [
	"ASYNC", # flake8-async
	"B",     # bugbear
	"B9",
	"C4",    # flake8-comprehensions
	"E",     # pycodestyle (error)
	"F",     # pyflakes
	"FA",    # flake8-future-annotations
	"I",     # isort
	"PGH",   # pygrep-hooks
	"PIE",   # flake8-pie
	"PYI",   # flake8-pyi
	"RUF",
	"SIM",   # flake8-simplify
	"T20",   # flake8-print
	"UP",    # pyupgrade
]
ignore = ["B011", "E501"]
pydocstyle = { convention = "google" }

[tool.ruff.lint.isort]
combine-as-imports = true
extra-standard-library = ["typing_extensions"]
known-first-party = ["evedata_docs"]
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
"scripts/**" = ["T20"] # Ignore print statements in scripts

[tool.uv]
default-groups = ["dev"]
package = false
required-version = ">=0.8.0,<0.9"
